// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scene_file.proto

package dev.xfj.protobuf;

/**
 * Protobuf type {@code dev.xfj.protobuf.SpriteRendererFile}
 */
public final class SpriteRendererFile extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:dev.xfj.protobuf.SpriteRendererFile)
    SpriteRendererFileOrBuilder {
private static final long serialVersionUID = 0L;
  // Use SpriteRendererFile.newBuilder() to construct.
  private SpriteRendererFile(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private SpriteRendererFile() {
    color_ = emptyFloatList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new SpriteRendererFile();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return dev.xfj.protobuf.Scene.internal_static_dev_xfj_protobuf_SpriteRendererFile_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return dev.xfj.protobuf.Scene.internal_static_dev_xfj_protobuf_SpriteRendererFile_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            dev.xfj.protobuf.SpriteRendererFile.class, dev.xfj.protobuf.SpriteRendererFile.Builder.class);
  }

  public static final int COLOR_FIELD_NUMBER = 1;
  @SuppressWarnings("serial")
  private com.google.protobuf.Internal.FloatList color_;
  /**
   * <code>repeated float color = 1;</code>
   * @return A list containing the color.
   */
  @java.lang.Override
  public java.util.List<java.lang.Float>
      getColorList() {
    return color_;
  }
  /**
   * <code>repeated float color = 1;</code>
   * @return The count of color.
   */
  public int getColorCount() {
    return color_.size();
  }
  /**
   * <code>repeated float color = 1;</code>
   * @param index The index of the element to return.
   * @return The color at the given index.
   */
  public float getColor(int index) {
    return color_.getFloat(index);
  }
  private int colorMemoizedSerializedSize = -1;

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    getSerializedSize();
    if (getColorList().size() > 0) {
      output.writeUInt32NoTag(10);
      output.writeUInt32NoTag(colorMemoizedSerializedSize);
    }
    for (int i = 0; i < color_.size(); i++) {
      output.writeFloatNoTag(color_.getFloat(i));
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    {
      int dataSize = 0;
      dataSize = 4 * getColorList().size();
      size += dataSize;
      if (!getColorList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      colorMemoizedSerializedSize = dataSize;
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof dev.xfj.protobuf.SpriteRendererFile)) {
      return super.equals(obj);
    }
    dev.xfj.protobuf.SpriteRendererFile other = (dev.xfj.protobuf.SpriteRendererFile) obj;

    if (!getColorList()
        .equals(other.getColorList())) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (getColorCount() > 0) {
      hash = (37 * hash) + COLOR_FIELD_NUMBER;
      hash = (53 * hash) + getColorList().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static dev.xfj.protobuf.SpriteRendererFile parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static dev.xfj.protobuf.SpriteRendererFile parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static dev.xfj.protobuf.SpriteRendererFile parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static dev.xfj.protobuf.SpriteRendererFile parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static dev.xfj.protobuf.SpriteRendererFile parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static dev.xfj.protobuf.SpriteRendererFile parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static dev.xfj.protobuf.SpriteRendererFile parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static dev.xfj.protobuf.SpriteRendererFile parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static dev.xfj.protobuf.SpriteRendererFile parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static dev.xfj.protobuf.SpriteRendererFile parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static dev.xfj.protobuf.SpriteRendererFile parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static dev.xfj.protobuf.SpriteRendererFile parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(dev.xfj.protobuf.SpriteRendererFile prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code dev.xfj.protobuf.SpriteRendererFile}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:dev.xfj.protobuf.SpriteRendererFile)
      dev.xfj.protobuf.SpriteRendererFileOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return dev.xfj.protobuf.Scene.internal_static_dev_xfj_protobuf_SpriteRendererFile_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return dev.xfj.protobuf.Scene.internal_static_dev_xfj_protobuf_SpriteRendererFile_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              dev.xfj.protobuf.SpriteRendererFile.class, dev.xfj.protobuf.SpriteRendererFile.Builder.class);
    }

    // Construct using dev.xfj.protobuf.SpriteRendererFile.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      color_ = emptyFloatList();
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return dev.xfj.protobuf.Scene.internal_static_dev_xfj_protobuf_SpriteRendererFile_descriptor;
    }

    @java.lang.Override
    public dev.xfj.protobuf.SpriteRendererFile getDefaultInstanceForType() {
      return dev.xfj.protobuf.SpriteRendererFile.getDefaultInstance();
    }

    @java.lang.Override
    public dev.xfj.protobuf.SpriteRendererFile build() {
      dev.xfj.protobuf.SpriteRendererFile result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public dev.xfj.protobuf.SpriteRendererFile buildPartial() {
      dev.xfj.protobuf.SpriteRendererFile result = new dev.xfj.protobuf.SpriteRendererFile(this);
      buildPartialRepeatedFields(result);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartialRepeatedFields(dev.xfj.protobuf.SpriteRendererFile result) {
      if (((bitField0_ & 0x00000001) != 0)) {
        color_.makeImmutable();
        bitField0_ = (bitField0_ & ~0x00000001);
      }
      result.color_ = color_;
    }

    private void buildPartial0(dev.xfj.protobuf.SpriteRendererFile result) {
      int from_bitField0_ = bitField0_;
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof dev.xfj.protobuf.SpriteRendererFile) {
        return mergeFrom((dev.xfj.protobuf.SpriteRendererFile)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(dev.xfj.protobuf.SpriteRendererFile other) {
      if (other == dev.xfj.protobuf.SpriteRendererFile.getDefaultInstance()) return this;
      if (!other.color_.isEmpty()) {
        if (color_.isEmpty()) {
          color_ = other.color_;
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          ensureColorIsMutable();
          color_.addAll(other.color_);
        }
        onChanged();
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 13: {
              float v = input.readFloat();
              ensureColorIsMutable();
              color_.addFloat(v);
              break;
            } // case 13
            case 10: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              ensureColorIsMutable();
              while (input.getBytesUntilLimit() > 0) {
                color_.addFloat(input.readFloat());
              }
              input.popLimit(limit);
              break;
            } // case 10
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private com.google.protobuf.Internal.FloatList color_ = emptyFloatList();
    private void ensureColorIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        color_ = mutableCopy(color_);
        bitField0_ |= 0x00000001;
      }
    }
    /**
     * <code>repeated float color = 1;</code>
     * @return A list containing the color.
     */
    public java.util.List<java.lang.Float>
        getColorList() {
      return ((bitField0_ & 0x00000001) != 0) ?
               java.util.Collections.unmodifiableList(color_) : color_;
    }
    /**
     * <code>repeated float color = 1;</code>
     * @return The count of color.
     */
    public int getColorCount() {
      return color_.size();
    }
    /**
     * <code>repeated float color = 1;</code>
     * @param index The index of the element to return.
     * @return The color at the given index.
     */
    public float getColor(int index) {
      return color_.getFloat(index);
    }
    /**
     * <code>repeated float color = 1;</code>
     * @param index The index to set the value at.
     * @param value The color to set.
     * @return This builder for chaining.
     */
    public Builder setColor(
        int index, float value) {

      ensureColorIsMutable();
      color_.setFloat(index, value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated float color = 1;</code>
     * @param value The color to add.
     * @return This builder for chaining.
     */
    public Builder addColor(float value) {

      ensureColorIsMutable();
      color_.addFloat(value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated float color = 1;</code>
     * @param values The color to add.
     * @return This builder for chaining.
     */
    public Builder addAllColor(
        java.lang.Iterable<? extends java.lang.Float> values) {
      ensureColorIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, color_);
      onChanged();
      return this;
    }
    /**
     * <code>repeated float color = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearColor() {
      color_ = emptyFloatList();
      bitField0_ = (bitField0_ & ~0x00000001);
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:dev.xfj.protobuf.SpriteRendererFile)
  }

  // @@protoc_insertion_point(class_scope:dev.xfj.protobuf.SpriteRendererFile)
  private static final dev.xfj.protobuf.SpriteRendererFile DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new dev.xfj.protobuf.SpriteRendererFile();
  }

  public static dev.xfj.protobuf.SpriteRendererFile getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<SpriteRendererFile>
      PARSER = new com.google.protobuf.AbstractParser<SpriteRendererFile>() {
    @java.lang.Override
    public SpriteRendererFile parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<SpriteRendererFile> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<SpriteRendererFile> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public dev.xfj.protobuf.SpriteRendererFile getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

